#!/bin/bash
action=$1
srcmd=$2
tmpdir=slides-$(date +%s%N |md5sum |cut -c 1-6) 
script_dir=${0%/*}/..
lib_dir=$script_dir/bower_components/reveal.js


#Read the config
pushd $script_dir >> /dev/null
source config.sh
popd >> /dev/null
#Cleanup temp dir on exit (Ctrl+C or Ctrl+\)

printHelp(){
  #echo "Invalid argurment(s)"
  echo "Usage: mdslides <action> [<md-file>]"
  echo " "
  echo "Actions:"
  echo "  init   or i  create a template.md file"
  echo "  serve  or s  serve the specified md file using local server"
  echo "  deploy or d  deploy to dropbox"
  echo "  help   or h  print this helpful message"
}

if [ $# -lt 1  ]
then
  printHelp
  exit
fi
#echo "mdslides started"

prepareFramework(){
  echo "Copying lib file..."
  destdir=$1;
  # FIXME: copy everything to destdir
  #Copy reveal.js framework to temp dir
  mkdir $destdir
  mkdir $destdir/pic;
  mkdir $local_lib_dir
  pushd $script_dir >> /dev/null
  cp -r ./bower_components/reveal.js/* $local_lib_dir
  cp -r ./bower_components/jquery/dist/jquery.min.js $local_lib_dir/lib/js/
  # TODO: copy jquery
  cp -r ./custom/* $local_lib_dir # for /js/

  cp -r ./custom/* $destdir # for templates
  popd >> /dev/null
  echo "Done"
}


compile(){
    srcmd=$1
    destdir=$2
    isLocal=$3
    cp $srcmd $destdir/tmp.md;
    cp pic/* $destdir/pic/;

    pushd $destdir >> /dev/null

    #Convert bg path to full path
    #sed -r "s|\/\/bg=(.*)|<\!-- .slide:data-background=\"file:\/\/\/$destdir\/\1\" -->|g" tmp.md > tmp.1
    if $isLocal
    then 
      sed -r "/^\/\/bg=(#|http)/!  s|\/\/bg=(.*)|<\!-- .slide:data-background=\"file:\/\/\/$destdir\/\1\" -->|g" tmp.md > tmp.1 
      mv tmp.1 tmp.md
    fi
    sed -r "s/\/\/bg=(.*)/<\!-- .slide:data-background=\"\1\" -->/g" tmp.md > tmp.1 
    mv tmp.1 tmp.md


    #Remove comments (lines start with '//')
    sed -i "/^\/\/.*$/d" tmp.md

    #Put the content into the template
    sed -e "/Your content will be here./r tmp.md" -e "//d" $destdir/template.html> $destdir/$srcmd.html ;
    #echo "$1.html refreshed.";

    popd >> /dev/null
}


case "$action" in
  "serve" | "s") 
    if [ $# -lt 2  ]
    then
      echo "You need to specify the markdown filename"
      printHelp
      exit
    fi
    fulltmpdir=/tmp/$tmpdir
    prepareFramework $fulltmpdir

    trap "echo ' Cleaning up...'; rm -r $fulltmpdir; exit" SIGINT SIGQUIT

    firsttime=true;

    while true 
    do 
      compile $srcmd $fulltmpdir true

      if $firsttime
      then
        echo "opening firefox"
        firefox $fulltmpdir/$srcmd.html;
        firsttime=false;
      fi 

      inotifywait -q -e close_write $srcmd ;
      echo "Updated: file://"$fulltmpdir/$srcmd.html;
    done
    ;;
    #################################################################
  "deploy" | "d")
    if [ $# -lt 2  ]
    then
      echo "You need to specify the markdown filename"
      printHelp
      exit
    fi
    pushd $script_dir >> /dev/null
    source config.sh
    popd >> /dev/null

    fulltmpdir=$dropbox_public_dir/$tmpdir
    #FIXME
    prepareFramework $fulltmpdir
    cp -r $local_lib_dir $public_lib_dir
    compile $srcmd $fulltmpdir false

    echo "Your slides are published to:"
    echo "$dropbox_public_url_prefix/$tmpdir/$srcmd.html"
    ;;
    #################################################################
  "init" | "i")
    cp $script_dir/custom/template.md .
    # create pic folder?
    echo "template.md created."
    ;;

    #################################################################
  "help" | "h")
    printHelp
    ;;
  *)  
      echo "Invalid action: " $action
      printHelp
esac


